// Gradle plugins
buildscript {
    repositories {
        jcenter()
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
        maven {
            name = 'eclipse-staging'
            url = 'https://repo.eclipse.org/content/repositories/eclipse-staging'
        }
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'org.spongepowered:event-impl-gen:1.0.0'
        classpath 'org.spongepowered:spongegradle:0.3.1-SNAPSHOT'
    }
}

version = '4.0.0-SNAPSHOT'

// Include shared Gradle configuration
ext.api = project
apply from: 'gradle/sponge.gradle'

sourceSets {
    ap {
        compileClasspath += main.compileClasspath + main.output
    }
}

// Project dependencies
dependencies {
    // Logging
    compile 'org.slf4j:slf4j-api:1.7.14'

    // Dependencies provided by Minecraft
    compile 'com.google.guava:guava:17.0'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    // Only included in server
    compile 'com.google.code.findbugs:jsr305:1.3.9'

    // Dependency injection
    compile 'com.google.inject:guice:4.0'

    // Plugin meta
    compile 'org.spongepowered:plugin-meta:0.1-SNAPSHOT'

    // Configuration
    compile 'ninja.leaping.configurate:configurate-hocon:3.1.1'
    compile 'ninja.leaping.configurate:configurate-gson:3.1.1'
    compile 'ninja.leaping.configurate:configurate-yaml:3.1.1'

    compile 'com.flowpowered:flow-math:1.0.1'
    compile 'com.flowpowered:flow-noise:1.0.1-SNAPSHOT'

    // Event generation
    compile 'org.ow2.asm:asm:5.0.3'
    compile 'org.spongepowered:event-gen-core:1.0.0'
}

// JAR manifest configuration
jar {
    from sourceSets.ap.output

    manifest {
        attributes('Main-Class': 'org.spongepowered.api.util.InformativeMain')
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from sourceSets.ap.allSource
}

artifacts {
    archives sourceJar
    archives javadocJar
}

apply plugin: 'event-impl-gen'

// Compile time code generator for the event factory
genEventImpl {
    includeSrc = [
            'src/main/java/org/spongepowered/api/event/achievement/',
            'src/main/java/org/spongepowered/api/event/action/',
            'src/main/java/org/spongepowered/api/event/block/',
            'src/main/java/org/spongepowered/api/event/command/',
            'src/main/java/org/spongepowered/api/event/data/',
            'src/main/java/org/spongepowered/api/event/economy/',
            'src/main/java/org/spongepowered/api/event/entity/',
            'src/main/java/org/spongepowered/api/event/game/',
            'src/main/java/org/spongepowered/api/event/item/inventory/',
            'src/main/java/org/spongepowered/api/event/message/',
            'src/main/java/org/spongepowered/api/event/network/',
            'src/main/java/org/spongepowered/api/event/server/',
            'src/main/java/org/spongepowered/api/event/service/',
            'src/main/java/org/spongepowered/api/event/statistic/',
            'src/main/java/org/spongepowered/api/event/user/',
            'src/main/java/org/spongepowered/api/event/world/',
    ]
    excludeSrc = []
    outputDir = 'src/main/java/'
    outputFactory = 'org.spongepowered.api.event.SpongeEventFactory'
    eventImplCreateMethod = 'org.spongepowered.api.event.SpongeEventFactoryUtils.createEventImpl'
    sortPriorityPrefix = 'original'
    groupingPrefixes = ['from': 'to']
    validateCode = false
}

sortClassFields {
    add 'main', 'org.spongepowered.api.data.key.Keys'
}

// Shaded API build (with all dependencies included)
apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    classifier = 'shaded'
    from sourceSets.ap.output
}

artifacts {
    archives shadowJar
}
