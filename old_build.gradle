// Gradle plugins
buildscript {
    repositories {
        maven {
            name = 'gradle-plugins'
            url = 'https://plugins.gradle.org/m2'
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
    }

    dependencies {
        classpath 'gradle.plugin.net.minecrell:licenser:0.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'gradle.plugin.org.spongepowered:spongegradle:0.8.1'
        classpath 'gradle.plugin.org.spongepowered:event-impl-gen:6.0.0'
    }
}

// Include shared Gradle configuration
ext.api = project
apply from: 'gradle/sponge.gradle'

// Generate mcmod.info file for project
apply plugin: 'org.spongepowered.meta'

sourceSets {
    ap {
        compileClasspath += main.compileClasspath + main.output
    }
}

// Project dependencies
dependencies {
    // Logging
    compile 'org.slf4j:slf4j-api:1.7.25'

    // Dependencies provided by Minecraft
    compile 'com.google.guava:guava:21.0'
    compile 'com.google.errorprone:error_prone_annotations:2.0.15'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'org.apache.commons:commons-lang3:3.5'
    // Only included in server
    compile 'org.checkerframework:checker-qual:2.8.1'

    // Dependency injection
    compile 'com.google.inject:guice:4.1.0'

    // Java 8 high performance cache (+ wrapper for Guava)
    compile 'com.github.ben-manes.caffeine:caffeine:2.5.4'
    compile('com.github.ben-manes.caffeine:guava:2.5.4') {
        exclude group: 'com.google.guava', module: 'guava'
    }

    // Plugin meta
    compile 'org.spongepowered:plugin-meta:0.4.1'

    // Configuration
    compile 'org.spongepowered:configurate-hocon:3.6.1'
    compile 'org.spongepowered:configurate-gson:3.6.1'
    compile 'org.spongepowered:configurate-yaml:3.6.1'
    compile 'org.spongepowered:math:2.0.0-SNAPSHOT'
    compile 'org.spongepowered:noise:2.0.0-SNAPSHOT'

    // Event generation
    compile 'org.ow2.asm:asm:5.2'
}

// JAR manifest configuration
jar {
    from sourceSets.ap.output

    manifest {
        attributes('Main-Class': 'org.spongepowered.api.util.InformativeMain')
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from sourceSets.ap.allSource
}

artifacts {
    archives sourceJar
    archives javadocJar
}

// Compile time code generator for the event factory
apply plugin: 'org.spongepowered.event-impl-gen'

genEventImpl {
    inclusiveAnnotation 'org.spongepowered.api.util.annotation.eventgen.GenerateFactoryMethod'
    outputFactory = 'org.spongepowered.api.event.SpongeEventFactory'

    include 'org/spongepowered/api/event/*/**/*'
    exclude 'org/spongepowered/api/event/cause/'
    exclude 'org/spongepowered/api/event/filter/'
    exclude 'org/spongepowered/api/event/impl/'
}

// Define setupDecompWorkspace task so it runs when setting up the implementation workspace
task('setupDecompWorkspace', dependsOn: 'genEventImpl')

sortClassFields {
    add 'main', 'org.spongepowered.api.CatalogTypes'
    add 'main', 'org.spongepowered.api.advancement.AdvancementTypes'
    add 'main', 'org.spongepowered.api.advancement.criteria.trigger.Triggers'
    add 'main', 'org.spongepowered.api.boss.BossBarColors'
    add 'main', 'org.spongepowered.api.boss.BossBarOverlays'
    add 'main', 'org.spongepowered.api.data.Keys'
    add 'main', 'org.spongepowered.api.data.type.ArmorTypes'
    add 'main', 'org.spongepowered.api.data.type.ArtTypes'
    add 'main', 'org.spongepowered.api.data.type.BannerPatternShapes'
    add 'main', 'org.spongepowered.api.data.type.BodyParts'
    add 'main', 'org.spongepowered.api.data.type.CatTypes'
    add 'main', 'org.spongepowered.api.data.type.ChestAttachmentTypes'
    add 'main', 'org.spongepowered.api.data.type.ComparatorTypes'
    add 'main', 'org.spongepowered.api.data.type.DyeColors'
    add 'main', 'org.spongepowered.api.data.type.FoxTypes'
    add 'main', 'org.spongepowered.api.data.type.Hinges'
    add 'main', 'org.spongepowered.api.data.type.HorseColors'
    add 'main', 'org.spongepowered.api.data.type.HorseStyles'
    add 'main', 'org.spongepowered.api.data.type.InstrumentTypes'
    add 'main', 'org.spongepowered.api.data.type.MooshroomTypes'
    add 'main', 'org.spongepowered.api.data.type.NotePitches'
    add 'main', 'org.spongepowered.api.data.type.PandaTypes'
    add 'main', 'org.spongepowered.api.data.type.ParrotTypes'
    add 'main', 'org.spongepowered.api.data.type.PickupRules'
    add 'main', 'org.spongepowered.api.data.type.PortionTypes'
    add 'main', 'org.spongepowered.api.data.type.Professions'
    add 'main', 'org.spongepowered.api.data.type.RabbitTypes'
    add 'main', 'org.spongepowered.api.data.type.RailDirections'
    add 'main', 'org.spongepowered.api.data.type.SkinParts'
    add 'main', 'org.spongepowered.api.data.type.SlabPortions'
    add 'main', 'org.spongepowered.api.data.type.StairShapes'
    add 'main', 'org.spongepowered.api.data.type.ToolTypes'
    add 'main', 'org.spongepowered.api.data.type.WireAttachmentTypes'
    add 'main', 'org.spongepowered.api.data.type.WoodTypes'
    add 'main', 'org.spongepowered.api.block.BlockTypes'
    add 'main', 'org.spongepowered.api.block.entity.BlockEntityTypes'
    add 'main', 'org.spongepowered.api.state.BooleanStateProperties'
    add 'main', 'org.spongepowered.api.state.EnumStateProperties'
    add 'main', 'org.spongepowered.api.state.IntegerStateProperties'
    add 'main', 'org.spongepowered.api.data.persistence.DataFormats'
    add 'main', 'org.spongepowered.api.effect.particle.ParticleOptions'
    add 'main', 'org.spongepowered.api.effect.particle.ParticleTypes'
    add 'main', 'org.spongepowered.api.effect.potion.PotionEffectTypes'
    add 'main', 'org.spongepowered.api.effect.sound.SoundTypes'
    add 'main', 'org.spongepowered.api.entity.EntityTypes'
    add 'main', 'org.spongepowered.api.entity.ai.task.AITaskTypes'
    add 'main', 'org.spongepowered.api.entity.ai.GoalTypes'
    add 'main', 'org.spongepowered.api.entity.living.monster.boss.dragon.phase.DragonPhaseTypes'
    add 'main', 'org.spongepowered.api.entity.living.player.gamemode.GameModes'
    add 'main', 'org.spongepowered.api.event.cause.EventContextKeys'
    add 'main', 'org.spongepowered.api.event.cause.entity.damage.DamageModifierTypes'
    add 'main', 'org.spongepowered.api.event.cause.entity.damage.DamageTypes'
    add 'main', 'org.spongepowered.api.event.cause.entity.damage.source.DamageSources'
    add 'main', 'org.spongepowered.api.event.cause.entity.dismount.DismountTypes'
    add 'main', 'org.spongepowered.api.event.cause.entity.health.HealingTypes'
    add 'main', 'org.spongepowered.api.event.cause.entity.health.HealthModifierTypes'
    add 'main', 'org.spongepowered.api.event.cause.entity.health.source.HealingSources'
    add 'main', 'org.spongepowered.api.event.cause.entity.spawn.SpawnTypes'
    add 'main', 'org.spongepowered.api.event.cause.entity.teleport.TeleportTypes'
    add 'main', 'org.spongepowered.api.fluid.FluidTypes'
    add 'main', 'org.spongepowered.api.item.enchantment.EnchantmentTypes'
    add 'main', 'org.spongepowered.api.item.FireworkShapes'
    add 'main', 'org.spongepowered.api.item.ItemTypes'
    add 'main', 'org.spongepowered.api.item.inventory.equipment.EquipmentTypes'
    add 'main', 'org.spongepowered.api.item.inventory.ContainerTypes'
    add 'main', 'org.spongepowered.api.item.inventory.query.QueryTypes'
    add 'main', 'org.spongepowered.api.item.potion.PotionTypes'
    add 'main', 'org.spongepowered.api.scoreboard.CollisionRules'
    add 'main', 'org.spongepowered.api.scoreboard.Visibilities'
    add 'main', 'org.spongepowered.api.scoreboard.criteria.Criteria'
    add 'main', 'org.spongepowered.api.scoreboard.displayslot.DisplaySlots'
    add 'main', 'org.spongepowered.api.scoreboard.objective.displaymode.ObjectiveDisplayModes'
    add 'main', 'org.spongepowered.api.service.economy.transaction.TransactionTypes'
    add 'main', 'org.spongepowered.api.statistic.Statistics'
    add 'main', 'org.spongepowered.api.statistic.StatisticCategories'
    add 'main', 'org.spongepowered.api.text.chat.ChatTypes'
    add 'main', 'org.spongepowered.api.text.chat.ChatVisibilities'
    add 'main', 'org.spongepowered.api.text.format.TextColors'
    add 'main', 'org.spongepowered.api.text.format.TextStyles'
    add 'main', 'org.spongepowered.api.text.selector.SelectorTypes'
    add 'main', 'org.spongepowered.api.util.TypeTokens'
    add 'main', 'org.spongepowered.api.util.ban.BanTypes'
    add 'main', 'org.spongepowered.api.util.rotation.Rotations'
    add 'main', 'org.spongepowered.api.world.biome.BiomeTypes'
    add 'main', 'org.spongepowered.api.world.BlockChangeFlags'
    add 'main', 'org.spongepowered.api.world.DimensionTypes'
    add 'main', 'org.spongepowered.api.world.gen.GeneratorTypes'
    add 'main', 'org.spongepowered.api.world.difficulty.Difficulties'
    add 'main', 'org.spongepowered.api.world.teleport.TeleportHelperFilters'
    add 'main', 'org.spongepowered.api.world.weather.Weathers'
    add 'main', 'org.spongepowered.api.util.TypeTokens'
}

// Shaded API build (with all dependencies included)
apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    classifier = 'shaded'
    from sourceSets.ap.output
}

artifacts {
    archives shadowJar
}
