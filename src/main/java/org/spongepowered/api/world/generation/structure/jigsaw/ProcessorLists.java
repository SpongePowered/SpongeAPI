/*
 * This file is part of SpongeAPI, licensed under the MIT License (MIT).
 *
 * Copyright (c) SpongePowered <https://www.spongepowered.org>
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.spongepowered.api.world.generation.structure.jigsaw;

import org.spongepowered.api.ResourceKey;
import org.spongepowered.api.Sponge;
import org.spongepowered.api.registry.DefaultedRegistryReference;
import org.spongepowered.api.registry.Registry;
import org.spongepowered.api.registry.RegistryKey;
import org.spongepowered.api.registry.RegistryScope;
import org.spongepowered.api.registry.RegistryScopes;
import org.spongepowered.api.registry.RegistryTypes;

/**
 * <!-- This file is automatically generated. Any manual changes will be overwritten. -->
 */
@SuppressWarnings("unused")
@RegistryScopes(scopes = RegistryScope.ENGINE)
public final class ProcessorLists {

    //@formatter:off
    public static final DefaultedRegistryReference<ProcessorList> ANCIENT_CITY_GENERIC_DEGRADATION = ProcessorLists.key(ResourceKey.minecraft("ancient_city_generic_degradation"));

    public static final DefaultedRegistryReference<ProcessorList> ANCIENT_CITY_START_DEGRADATION = ProcessorLists.key(ResourceKey.minecraft("ancient_city_start_degradation"));

    public static final DefaultedRegistryReference<ProcessorList> ANCIENT_CITY_WALLS_DEGRADATION = ProcessorLists.key(ResourceKey.minecraft("ancient_city_walls_degradation"));

    public static final DefaultedRegistryReference<ProcessorList> BASTION_GENERIC_DEGRADATION = ProcessorLists.key(ResourceKey.minecraft("bastion_generic_degradation"));

    public static final DefaultedRegistryReference<ProcessorList> BOTTOM_RAMPART = ProcessorLists.key(ResourceKey.minecraft("bottom_rampart"));

    public static final DefaultedRegistryReference<ProcessorList> BRIDGE = ProcessorLists.key(ResourceKey.minecraft("bridge"));

    public static final DefaultedRegistryReference<ProcessorList> EMPTY = ProcessorLists.key(ResourceKey.minecraft("empty"));

    public static final DefaultedRegistryReference<ProcessorList> ENTRANCE_REPLACEMENT = ProcessorLists.key(ResourceKey.minecraft("entrance_replacement"));

    public static final DefaultedRegistryReference<ProcessorList> FARM_DESERT = ProcessorLists.key(ResourceKey.minecraft("farm_desert"));

    public static final DefaultedRegistryReference<ProcessorList> FARM_PLAINS = ProcessorLists.key(ResourceKey.minecraft("farm_plains"));

    public static final DefaultedRegistryReference<ProcessorList> FARM_SAVANNA = ProcessorLists.key(ResourceKey.minecraft("farm_savanna"));

    public static final DefaultedRegistryReference<ProcessorList> FARM_SNOWY = ProcessorLists.key(ResourceKey.minecraft("farm_snowy"));

    public static final DefaultedRegistryReference<ProcessorList> FARM_TAIGA = ProcessorLists.key(ResourceKey.minecraft("farm_taiga"));

    public static final DefaultedRegistryReference<ProcessorList> FOSSIL_COAL = ProcessorLists.key(ResourceKey.minecraft("fossil_coal"));

    public static final DefaultedRegistryReference<ProcessorList> FOSSIL_DIAMONDS = ProcessorLists.key(ResourceKey.minecraft("fossil_diamonds"));

    public static final DefaultedRegistryReference<ProcessorList> FOSSIL_ROT = ProcessorLists.key(ResourceKey.minecraft("fossil_rot"));

    public static final DefaultedRegistryReference<ProcessorList> HIGH_RAMPART = ProcessorLists.key(ResourceKey.minecraft("high_rampart"));

    public static final DefaultedRegistryReference<ProcessorList> HIGH_WALL = ProcessorLists.key(ResourceKey.minecraft("high_wall"));

    public static final DefaultedRegistryReference<ProcessorList> HOUSING = ProcessorLists.key(ResourceKey.minecraft("housing"));

    public static final DefaultedRegistryReference<ProcessorList> MOSSIFY_10_PERCENT = ProcessorLists.key(ResourceKey.minecraft("mossify_10_percent"));

    public static final DefaultedRegistryReference<ProcessorList> MOSSIFY_20_PERCENT = ProcessorLists.key(ResourceKey.minecraft("mossify_20_percent"));

    public static final DefaultedRegistryReference<ProcessorList> MOSSIFY_70_PERCENT = ProcessorLists.key(ResourceKey.minecraft("mossify_70_percent"));

    public static final DefaultedRegistryReference<ProcessorList> OUTPOST_ROT = ProcessorLists.key(ResourceKey.minecraft("outpost_rot"));

    public static final DefaultedRegistryReference<ProcessorList> RAMPART_DEGRADATION = ProcessorLists.key(ResourceKey.minecraft("rampart_degradation"));

    public static final DefaultedRegistryReference<ProcessorList> ROOF = ProcessorLists.key(ResourceKey.minecraft("roof"));

    public static final DefaultedRegistryReference<ProcessorList> SIDE_WALL_DEGRADATION = ProcessorLists.key(ResourceKey.minecraft("side_wall_degradation"));

    public static final DefaultedRegistryReference<ProcessorList> STABLE_DEGRADATION = ProcessorLists.key(ResourceKey.minecraft("stable_degradation"));

    public static final DefaultedRegistryReference<ProcessorList> STREET_PLAINS = ProcessorLists.key(ResourceKey.minecraft("street_plains"));

    public static final DefaultedRegistryReference<ProcessorList> STREET_SAVANNA = ProcessorLists.key(ResourceKey.minecraft("street_savanna"));

    public static final DefaultedRegistryReference<ProcessorList> STREET_SNOWY_OR_TAIGA = ProcessorLists.key(ResourceKey.minecraft("street_snowy_or_taiga"));

    public static final DefaultedRegistryReference<ProcessorList> TRAIL_RUINS_HOUSES_ARCHAEOLOGY = ProcessorLists.key(ResourceKey.minecraft("trail_ruins_houses_archaeology"));

    public static final DefaultedRegistryReference<ProcessorList> TRAIL_RUINS_ROADS_ARCHAEOLOGY = ProcessorLists.key(ResourceKey.minecraft("trail_ruins_roads_archaeology"));

    public static final DefaultedRegistryReference<ProcessorList> TRAIL_RUINS_TOWER_TOP_ARCHAEOLOGY = ProcessorLists.key(ResourceKey.minecraft("trail_ruins_tower_top_archaeology"));

    public static final DefaultedRegistryReference<ProcessorList> TREASURE_ROOMS = ProcessorLists.key(ResourceKey.minecraft("treasure_rooms"));

    public static final DefaultedRegistryReference<ProcessorList> ZOMBIE_DESERT = ProcessorLists.key(ResourceKey.minecraft("zombie_desert"));

    public static final DefaultedRegistryReference<ProcessorList> ZOMBIE_PLAINS = ProcessorLists.key(ResourceKey.minecraft("zombie_plains"));

    public static final DefaultedRegistryReference<ProcessorList> ZOMBIE_SAVANNA = ProcessorLists.key(ResourceKey.minecraft("zombie_savanna"));

    public static final DefaultedRegistryReference<ProcessorList> ZOMBIE_SNOWY = ProcessorLists.key(ResourceKey.minecraft("zombie_snowy"));

    public static final DefaultedRegistryReference<ProcessorList> ZOMBIE_TAIGA = ProcessorLists.key(ResourceKey.minecraft("zombie_taiga"));

    //@formatter:on
    private ProcessorLists() {
    }

    public static Registry<ProcessorList> registry() {
        return Sponge.server().registry(RegistryTypes.PROCESSOR_LIST);
    }

    private static DefaultedRegistryReference<ProcessorList> key(final ResourceKey location) {
        return RegistryKey.of(RegistryTypes.PROCESSOR_LIST, location).asDefaultedReference(Sponge::server);
    }
}
